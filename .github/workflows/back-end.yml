name: Back-end Continuous Integration
on:
  push:
    branches: [main, staging, development]
    paths: ['api/**', '.github/workflows/back-end.yml']
  pull_request:
    branches: [main]
    types: [opened, synchronize]
    paths: ['api/**', '.github/workflows/back-end.yml']

jobs:
  setup:
    name: Setup workspace
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.names.outputs.name }}
      environment: ${{ steps.names.outputs.environment }}
    env:
      BRANCH: ${{ github.ref_name }}
    steps:
      - id: names
        name: Name for GitHub Environment
        run: |
          environtment=Development
          if [ "$BRANCH" = "main" ]; then
            name=production
            environment=Production
          elif [ "$BRANCH" = "staging" ]; then
            environment=${BRANCH^}
          fi
          echo environment=$environment >> "$GITHUB_OUTPUT"
      - name: Checkout
        uses: actions/checkout@v3
      - name: Installing ruby and dependencies
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: api

  lint:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Installing ruby and dependencies
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: api
      - name: Run linter
        run: cd api && bundle exec rubocop

  unit-tests:
    needs: [setup]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:14-3.3
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      RAILS_ENV: test
      POSTGRES_HOST: localhost
      POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Installing ruby and dependencies
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: api
      - name: Create and migrate test database
        run: |
          cd api
          bundle exec rails db:create
          bundle exec rails db:migrate
          bundle exec rails db:migrate:status
      - name: Run specs
        run: |
          cd api
          bundle exec rails db:test:prepare
          bundle exec rspec
      - name: Upload coverage report to CodeCov
        uses: codecov/codecov-action@v3
        with:
          directory: ./api/coverage/
          flags: back-end

  deploy:
    needs: [setup, lint, unit-tests]
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot' }}
    environment: ${{ needs.setup.outputs.environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ROLE_TO_ASUME: arn:aws:iam::${{ secrets.AWS_ENV_ID }}:role/github
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Show current directory
        run: pwd
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASUME }}
          role-session-name: github-${{ github.event.repository.name }}-back-end
          role-duration-seconds: 1200
      - name: Login to Amazon ECR
        id: aws-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build docker image and push
        uses: docker/build-push-action@v4
        with:
          context: ./api
          file: ./api/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.aws-ecr.outputs.registry }}/curriculum-vitae:back-end
      - name: Restart the service
        if: ${{ github.event_name == 'push' }}
        run: |
          aws ecs update-service --force-new-deployment --service cv-api --cluster curriculum-vitae
