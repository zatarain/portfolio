name: Front-end Continuous Integration
on:
  push:
    branches: [main, staging, development]
    paths: ['web/**', '.github/workflows/front-end.yml']
  pull_request:
    branches: [main]
    types: [opened, synchronize]
    paths: ['web/**', '.github/workflows/front-end.yml']

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.names.outputs.name }}
      environment: ${{ steps.names.outputs.environment }}
    env:
      BRANCH: ${{ github.ref_name }}
    steps:
      - id: names
        name: Name for GitHub Environment
        run: |
          environtment=Development
          if [ "$BRANCH" = "main" ]; then
            name=production
            environment=Production
          elif [ "$BRANCH" = "staging" ]; then
            environment=${BRANCH^}
          fi
          echo environment=$environment >> "$GITHUB_OUTPUT"
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '19.9.0'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      - name: Install dependencies
        run: cd web && npm ci --omit=optional

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '19.9.0'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      - name: Lint source code
        run: cd web && npm ci --omit=optional && npm run lint

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '19.9.0'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      - name: Build Next App
        run: cd web && npm ci --omit=optional && npm run build
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-${{ github.sha }}
          path: web/.next

  unit-tests:
    needs: [lint, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '19.9.0'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      - uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-${{ github.sha }}
          path: web/.next
      - name: Run unit tests
        run: cd web && npm ci --omit=optional && npm test -- --coverage --coveragePathIgnorePatterns='.*\.css'
      - name: Upload coverage report to CodeCov
        uses: codecov/codecov-action@v3
        with:
          directory: ./web/coverage/
          flags: front-end

  deploy:
    needs: [setup, unit-tests]
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot' }}
    environment: ${{ needs.setup.outputs.environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ROLE_TO_ASUME: arn:aws:iam::${{ secrets.AWS_ENV_ID }}:role/github
      NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASUME }}
          role-session-name: github-${{ github.event.repository.name }}-front-end
          role-duration-seconds: 1200
      - name: Login to Amazon ECR
        id: aws-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build docker image and push
        uses: docker/build-push-action@v4
        with:
          context: ./web
          file: ./web/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.aws-ecr.outputs.registry }}/curriculum-vitae:front-end
      - name: Restart the service
        if: ${{ github.event_name == 'push' }}
        run: |
          aws ecs update-service --force-new-deployment --service cv-web --cluster curriculum-vitae
