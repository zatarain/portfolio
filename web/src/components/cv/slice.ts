import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

import type { AppState } from '#store'
import { getData } from '#services/portfolio'

export interface Curriculum {
	name: string
	emails: Array<string>
	phones: Array<string>
	websites: Array<string>
	statement: string,
	experiences: Array<string>
	qualifications: Array<string>,
	projects: Array<string>,
	skills: Array<string>
	awards: Array<string>
	volunteering: Array<string>
}

export interface PortfolioState {
	value: Curriculum
	status: 'idle' | 'loading' | 'failed'
}

const initialState: PortfolioState = {
	value: {
		name: '',
		emails: [],
		phones: [],
		websites: [],
		statement: '',
		experiences: [],
		qualifications: [],
		projects: [],
		skills: [],
		awards: [],
		volunteering: [],
	},
	status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getDataAsync = createAsyncThunk(
	'portfolio/getData',
	async () => {
		const response = await getData()
		// The value we return becomes the `fulfilled` action payload
		return response.data
	}
)

export const portfolio = createSlice({
	name: 'portfolio',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(getDataAsync.pending, (state) => {
				state.status = 'loading'
			})
			.addCase(getDataAsync.fulfilled, (state, action) => {
				state.status = 'idle'
				state.value = action.payload
			})
	},
})

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.portfolio.value)`
export const selectPortfolio = (state: AppState) => state.portfolio.value

export default portfolio.reducer
